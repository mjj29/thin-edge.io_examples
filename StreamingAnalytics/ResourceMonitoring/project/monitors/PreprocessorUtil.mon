/*
 * Copyright (c) 2022 Cumulocity GmbH, Duesseldorf, Germany and/or its affiliates and/or their licensors.
 * Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Cumulocity GmbH.
 * 
 */

package com.apamax.thinedge.resourcemonitoring;

using com.apama.exceptions.Exception;

/**
 *  This monitor is responsible for parsing the raw measurements received
 *  over mqtt and sending out the float values to the measurement processing code.
 *  "<timestamp>:<measurement>" -----(preprocess)-----> <measurement>
 */
monitor PreprocessorUtil {

	action onload() {
		log "Loaded monitor PreprocessorUtil" at INFO;
		spawn preprocessIncomingData() to context("new_context");
	}

	action preprocessIncomingData() {
		monitor.subscribe(RawCpuMeasurement.SUBSCRIBE_CHANNEL);
		monitor.subscribe(RawMemMeasurement.SUBSCRIBE_CHANNEL);
		on all RawCpuMeasurement() as measurement {
			float cpuPercentActive := parseRawMessage(measurement.cpuMeasurement);
			if cpuPercentActive >= 0.0 {
				send CpuMeasurement(cpuPercentActive) to CpuMeasurement.CHANNEL;
			}
		}

		on all RawMemMeasurement() as measurement {
			float memPercentUsed := parseRawMessage(measurement.memMeasurement);
			if memPercentUsed >= 0.0 {
				send MemMeasurement(memPercentUsed) to MemMeasurement.CHANNEL;
			}
		}
	}

	action parseRawMessage(string rawMeasurement) returns float {
		integer colonIndex := rawMeasurement.find(":");
		try {
			if (colonIndex < 0) {
				throw Exception("Raw measurement missing expected ':'", "ParseException");
			}
			return float.parse(rawMeasurement.substring(colonIndex + 1, rawMeasurement.length()));
		} catch (Exception e) {
			log "Failed to parse the raw measurement. Got the following exception: " + e.getMessage()
				+ ". The following measurement will be dropped: " + rawMeasurement at WARN;
			return -1.0;
		}
	}
}
